#!/usr/bin/env node

const assert = require('assert');
const { camelize } = require('inflection')
const program = require('caporal');
const createCommand = require('../cli/commands/create');
const createCoreCommand = require('../cli/commands/create-core-stack');
const destroyCommand = require('../cli/commands/destroy');
const deleteBucketCommand = require('../cli/commands/delete-bucket');
const destroyCoreCommand = require('../cli/commands/destroy-core-stack');
const destroyApiCommand = require('../cli/commands/destroy-api');
const listCommand = require('../cli/commands/list');
const showCommand = require('../cli/commands/show');
const envCommand = require('../cli/commands/env');
const installApiCommand = require('../cli/commands/install-api');
const buildAdminCommand = require('../cli/commands/build-admin');
const uploadAdminCommand = require('../cli/commands/upload-admin');
const createAdminUserCommand = require('../cli/commands/create-admin-user');
const setTitleCommand = require('../cli/commands/set-title');
const loadSampleContentCommand = require('../cli/commands/load-sample-content');
const openAdminCommand = require('../cli/commands/open-admin');

const { loadBlog } = require('../cli/lib/blog')

function commandWithBlog(prog, command, description) {
  return prog
    .command(command, description)
    .option('-b --blog <blogName>',
            'Target Blog. Defaults to $SEEHUND_BLOG if set',
            undefined,
            process.env.SEEHUND_BLOG)
    .option('-r --region <region>',
            'AWS Region', undefined, 'us-east-1')
}

program
  .command('create_core', 'Create core resources for a new blog in the cloud.')
  .argument('<title>', 'The title of the blog.')
  .option('-n --name <name>',
          'Logical name of the blog. Defaults to "<TitleCamelCase>"')
  .option('-b --bucket-name <bucketName>',
          'S3 web bucket name. Default to auto generated.')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    console.log(args, options);

    const { title } = args;
    const { bucketName, stackName, region } = options;

    createCoreCommand({
      title,
      bucketName,
      region,
    }, (err, data) => {
      if(err) {
        console.log('Error creating stack');
        console.info(err)
      } else {
        console.log(`Created stack with id ${data.StackId}`)
      }
    });
  });


program
  .command('create', 'Create a new blog in the cloud.')
  .argument('<title>', 'The title of the blog.')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { title } = args;
    const { region } = options;

    createCommand({
      title,
      region
    }, (err, data) => {
      if(err) {
        console.log('Error creating blog');
        console.log(err)
      } else {
        console.log('Error')
      }
    });
  })

program
  .command('list', 'List all Seehund blogs in AWS account and region')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { region } = options;
    listCommand({region});
  });

commandWithBlog(program, 'show', 'Show information about a seehund blog')
  .action((args, options, logger) => {
    const { blog, region } = options;
    showCommand({blogName: blog, region});
  });

commandWithBlog(program, 'env', 'Output env variables for a blog')
  .action((args, options, logger) => {
    const { blog, region } = options;
    envCommand({blogName: blog, region});
  });


commandWithBlog(program, 'destroy_core', 'Destroy all cloud resources')
  .action((args, options, logger) => {
    const { blog, region } = options;
    destroyCoreCommand({blogName: blog, region}, (err) => {
      if(err) {
        console.log('Error deleting stack')
      } else {
        console.log('Deleted stack')
      }
    });
  });

commandWithBlog(program ,'destroy_api', 'Destroy all cloud resources')
  .action((args, options, logger) => {
    const { blog, region } = options;
    destroyApiCommand({blogName: blog, region}, (err) => {
      if(err) {
        console.log('Error deleting stack')
      } else {
        console.log('Deleted stack')
      }
    });
  });

commandWithBlog(program, 'destroy_bucket', 'Destroy the web bucket')
  .action((args, options, logger) => {
    const { blog, region } = options;
    deleteBucketCommand({blogName: blog, region}, (err) => {
      if(err) {
        console.log('Error deleting bucket')
      } else {
        console.log('Deleted bucket')
      }
    });
  });

commandWithBlog(program, 'destroy', 'Destroy all cloud resources')
  .action((args, options, logger) => {
    const { blog, region } = options;
    destroyCommand({blogName: blog, region}, (err) => {
      if(err) {
        console.log('Error destroying blog')
      } else {
        console.log('Destroyed blog')
      }
    });
  });

commandWithBlog(program, 'install_api', 'Installs the API')
  .action((args, options, logger) => {
    const { blog, region } = options;
    installApiCommand({blogName: blog, region}, () => {
      console.log("Install API complete");
    });
  });

commandWithBlog(program, 'build_admin',
                'Builds the admin system with webpack, supplying cloud resource configuration')
  .action(async (args, options, logger) => {
    const { blog, region } = options;
    try {
      await buildAdminCommand({blogName: blog});
      console.log('Built admin');
    } catch(e) {
      console.log('Error building admin')
      console.log(e);
    }
  });

commandWithBlog(program, 'upload_admin', 'Uploads the admin system to the web bucket')
  .action((args, options, logger) => {
    const { blog, region } = options;
    uploadAdminCommand({blogName: blog});
  });

commandWithBlog(program, 'create_admin_user', 'Creates an admin user')
  .action((args, options, logger) => {
    const { blog, region } = options;
    createAdminUserCommand({blogName: blog, region}, (err, data) => {
      if(err) {
        console.log('Error creating admin user')
      } else {
        console.log('Created admin user')
      }
    });
  });

commandWithBlog(program, 'set_title', 'Sets the blog title')
  .argument('<title>', 'Sets the title "Please quote spaces"')
  .action((args, options, logger) => {
    const { title } = args;
    const { blog, region } = options;
    setTitleCommand({blogName: blog, title, region}, (err, data) => {
      if(err) {
        console.log('Error setting title')
      } else {
        console.log(`Set title to "${title}"`)
      }
    });
  });

commandWithBlog(program, 'load_sample_content', 'Inserts sample content')
  .action(async (args, options, logger) => {
    const { blog, region } = options;
    try {
      await loadSampleContentCommand({blogName: blog, region});
      console.log('Loaded sample content');
    } catch(e) {
      console.log('Error loading content');
      throw(e);
    }
  });

commandWithBlog(program, 'admin', 'Opens admin panel')
  .action(async (args, options, logger) => {
    const { blog, region } = options;
    try {
      await openAdminCommand({blogName: blog, region})
    } catch(e) {
      console.log('Error opening admin');
      throw(e);
    }
  });

program.parse(process.argv)


