#!/usr/bin/env node

const assert = require('assert');
const { camelize } = require('inflection')
const program = require('caporal');
const createCommand = require('../commands/create');
const createCoreCommand = require('../commands/create-core-stack');
const destroyCommand = require('../commands/destroy');
const destroyCoreCommand = require('../commands/destroy-core-stack');
const listCommand = require('../commands/list');
const showCommand = require('../commands/show');
const installApiCommand = require('../commands/install-api');
const buildAdminCommand = require('../commands/build-admin');

program
  .command('create_core', 'Create core resources for a new blog in the cloud.')
  .argument('<title>', 'The title of the blog.')
  .option('-n --name <name>',
          'Logical name of the blog. Defaults to "<TitleCamelCase>"')
  .option('-b --bucket-name <bucketName>',
          'S3 web bucket name. Default to auto generated.')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    console.log(args, options);

    const { title } = args;
    const { bucketName, stackName, region } = options;

    createCoreCommand({
      title,
      bucketName,
      region,
    }, (err, data) => {
      if(err) {
        console.log('Error creating stack');
        console.info(err)
      } else {
        console.log(`Created stack with id ${data.StackId}`)
      }
    });
  });

program
  .command('destroy_core', 'Destroy all cloud resources')
  .argument('<blogName>', 'Blog to destroy')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { blogName } = args;
    const { region } = options;
    destroyCoreCommand({blogName, region});
  });


program
  .command('create', 'Create a new blog in the cloud.')
  .argument('<title>', 'The title of the blog.')
  .option('-b --bucket-name <bucketName>',
          'S3 web bucket name',
          undefined, undefined, true)
  .option('-s --stack-name <stackName>',
          'AWS Stack Name - defaults to "SeehundBlog-<TitleCamelCase>"')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    console.log(args, options);

    const { title } = args;
    const { bucketName, stackName, region } = options;

    createCommand({
      title,
      bucketName,
      region,
      stackName: stackName || `SeehundBlog-${camelize(title)}`
    });
  })

program
  .command('list', 'List all Seehund blogs in AWS account and region')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { region } = options;
    listCommand({region});
  });

program
  .command('show', 'Show information about a seehund blog')
  .argument('<blogName>', 'Blog to show')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { blogName } = args;
    const { region } = options;
    showCommand({blogName, region});
  });


program
  .command('destroy', 'Destroy all cloud resources')
  .argument('<blogName>', 'Blog to destroy')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { blogName } = args;
    const { region } = options;
    destroyCommand({blogName, region});
  });

program
  .command('install_api', 'Installs the API')
  .argument('<blogName>', 'Blog name to install')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { blogName } = args;
    const { region } = options;
    installApiCommand({blogName, region});
  });

program
  .command('build_admin', 'Builds the admin system with webpack, supplying cloud resource configuration')
  .argument('<blogName>', 'Blog name to build admin for')
  .option('-r --region <region>',
          'AWS Region', undefined, 'us-east-1')
  .action((args, options, logger) => {
    const { blogName } = args;
    const { region } = options;
    const appClientId = '6fj9o9lt8j4hqn9ed46s3vheth';
    const userPoolId = 'us-east-1_V9cE8RZWG';
    buildAdminCommand({blogName, appClientId, userPoolId});
  });

program.parse(process.argv)


