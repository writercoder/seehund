

Parameters:
  WebBucketName:
    Type: String
    Description: The name of the S3 bucket to create for hosting the frontend
  AdminBucketName:
    Type: String
    Description: The name of the S3 bucket to create for hosting the admin
  UserPoolName:
    Type: String
    Description: The name of the Cognito User Pool
  IdentityPoolName:
    Type: String
    Description: The name of the Cognito Identity Pool

Resources:
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref WebBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
  AdminBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref AdminBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
  WebHostBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucketName
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${WebBucketName}/*
  AdminWebHostBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminBucketName
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${AdminBucketName}/*
  WebCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          Compress: true
          TargetOriginId: FrontendWebBucket
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
        Enabled: true
        Origins:
          - Id: FrontendWebBucket
            DomainName: !Select [2, !Split ["/", !GetAtt WebBucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  AdminCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          Compress: true
          TargetOriginId: AdminWebBucket
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
        Enabled: true
        Origins:
          - Id: AdminWebBucket
            DomainName: !Select [2, !Split ["/", !GetAtt AdminBucket.WebsiteURL]]
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  BlogAdminUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      UsernameAttributes:
      - "email"
  BlogAdminPoolClientApp:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: BlogAdmin
      UserPoolId: !Ref BlogAdminUserPool
  BlogAdminIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref BlogAdminPoolClientApp
          ProviderName: !GetAtt BlogAdminUserPool.ProviderName
  # IAM roles
  BlogAdminIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref BlogAdminIdentityPool
      Roles:
        authenticated: !GetAtt BlogAdminAuthRole.Arn

  BlogAdminAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: BlogAdminIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow users to upload attachments to their
              # folder inside our S3 bucket
              - Effect: 'Allow'
                Action:
                  - 's3:*'
                Resource:
                  - Fn::Join:
                    - ''
                    -
                      - !GetAtt WebBucket.Arn
                      - '/content/*'

Outputs:
  SeeBlogAdminUserPoolId:
    Value: !Ref BlogAdminUserPool
  SeeBlogAdminUserPoolArn:
    Value: !GetAtt BlogAdminUserPool.Arn
  SeeBlogIdentityPoolId:
    Value: !Ref BlogAdminIdentityPool
  SeeBlogAdminAppClientId:
    Value: !Ref BlogAdminPoolClientApp
  SeeBlogWebBucketName:
    Value: !Ref WebBucketName
  SeeBlogWebBucketUrl:
    Value: !GetAtt WebBucket.WebsiteURL
  SeeBlogAdminBucketName:
    Value: !Ref AdminBucketName
  SeeBlogAdminBucketUrl:
    Value: !GetAtt AdminBucket.WebsiteURL
  SeeBlogWebCDNDomain:
    Value: !GetAtt WebCDN.DomainName
  SeeBlogAdminCDNDomain:
    Value: !GetAtt AdminCDN.DomainName
