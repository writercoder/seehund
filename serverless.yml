# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: blogengine # NOTE: update this with your service name

custom:
  webBucketName: "${opt:stage, self:provider.stage}.cloudblog.1000mileweb.com"
  webpack: './webpack.api.config.js'
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs4.3
  stage: 'dev'
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

plugins:
  - serverless-webpack

functions:
  create_post:
    handler: posts.create
    events:
      - http:
          path: posts
          method: post
          cors: true
  show_post:
    handler: posts.show
    events:
      - http:
          path: posts/{id}
          method: get
  list_posts:
    handler: posts.list
    events:
      - http:
          path: posts
          method: get
  update_post:
    handler: posts.update
    events:
      - http:
          path: posts/{id}
          method: put
  delete_post:
    handler: posts.destroy
    events:
      - http:
          path: posts/{id}
          method: delete

# you can add CloudFormation resource templates here
resources:
  Resources:
    WebHostBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebHostBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebHostBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.webBucketName}/*
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: postsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    PostsTableIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: PostsTable
      Properties:
        PolicyName: lambda-poststable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/my-table
        Roles:
          - Ref: IamRoleLambdaExecution


